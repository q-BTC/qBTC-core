services:
  # Bootstrap node - initial network node
  bootstrap:
    build: .
    container_name: qbtc-bootstrap
    environment:
      WALLET_PASSWORD: ${BOOTSTRAP_WALLET_PASSWORD:-bootstrappass}
      WALLET_FILE: "bootstrap.json"
      DISABLE_NAT_TRAVERSAL: "true"
      ROCKSDB_PATH: "/app/db"
      # Security configuration - disabled for test network
      RATE_LIMIT_ENABLED: "false"
      DDOS_PROTECTION_ENABLED: "false"
      ADMIN_ADDRESS: "bqs1HpmbeSd8nhRpq5zX5df91D3Xy8pSUovmV"
      ATTACK_PATTERN_DETECTION: "false"
      BOT_DETECTION_ENABLED: "false"
      PEER_REPUTATION_ENABLED: "true"
      SECURITY_LOGGING_ENABLED: "true"
      # Redis configuration
      USE_REDIS: "true"
      REDIS_URL: "redis://redis:6379/0"
      # Rate limits (requests per minute)
      RATE_LIMIT_WORKER: "10"
      RATE_LIMIT_BALANCE: "100"
      RATE_LIMIT_TRANSACTIONS: "100"
      RATE_LIMIT_HEALTH: "100"
      RATE_LIMIT_UTXOS: "100"
      RATE_LIMIT_DEFAULT: "60"
      # RPC configuration
      RPC_PORT: ${RPC_PORT:-8332}
      # Monitoring configuration
      GRAFANA_ENABLED: ${GRAFANA:-true}
      GRAFANA_PORT: ${GRAFANA_PORT:-3000}
    command: ["--bootstrap", "--dht-port", "8001", "--gossip-port", "8002"]
    ports:
      # Remove 8080 from here since nginx will handle it in production mode
      - "${RPC_PORT:-8332}:8332"     # RPC (configurable)
      - "8001:8001/udp" # DHT UDP
      - "8002:8002"     # Gossip TCP
    volumes:
      - bootstrap-data:/app/db
      - ./logs:/var/log/qbtc
    depends_on:
      - redis
    networks:
      - qbtc-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Validator node 1
  validator1:
    build: .
    container_name: qbtc-validator1
    environment:
      WALLET_PASSWORD: ${VALIDATOR1_WALLET_PASSWORD:-validator1pass}
      WALLET_FILE: "validator1.json"
      DISABLE_NAT_TRAVERSAL: "true"
      ROCKSDB_PATH: "/app/db"
      # Security configuration - disabled for test network
      RATE_LIMIT_ENABLED: "false"
      DDOS_PROTECTION_ENABLED: "false"
      ADMIN_ADDRESS: "bqs1HpmbeSd8nhRpq5zX5df91D3Xy8pSUovmV"
      ATTACK_PATTERN_DETECTION: "false"
      BOT_DETECTION_ENABLED: "false"
      PEER_REPUTATION_ENABLED: "true"
      SECURITY_LOGGING_ENABLED: "true"
      # Redis configuration
      USE_REDIS: "true"
      REDIS_URL: "redis://redis:6379/1"
      # Rate limits (requests per minute)
      RATE_LIMIT_WORKER: "10"
      RATE_LIMIT_BALANCE: "100"
      RATE_LIMIT_TRANSACTIONS: "100"
      RATE_LIMIT_HEALTH: "100"
      RATE_LIMIT_UTXOS: "100"
      RATE_LIMIT_DEFAULT: "60"
      # RPC configuration
      RPC_PORT: ${RPC_PORT:-8333}
      # Monitoring configuration
      GRAFANA_ENABLED: ${GRAFANA:-true}
      GRAFANA_PORT: ${GRAFANA_PORT:-3000}
    command: ["--bootstrap_server", "bootstrap", "--bootstrap_port", "8001", "--dht-port", "8003", "--gossip-port", "8004"]
    ports:
      - "8081:8080"
      - "${RPC_PORT:-8333}:8332"     # RPC (configurable)
      - "8003:8003/udp"
      - "8004:8004"
    volumes:
      - validator1-data:/app/db
      - ./logs:/var/log/qbtc
    depends_on:
      - bootstrap
      - redis
    networks:
      - qbtc-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Validator node 2
  validator2:
    build: .
    container_name: qbtc-validator2
    environment:
      WALLET_PASSWORD: ${VALIDATOR2_WALLET_PASSWORD:-validator2pass}
      WALLET_FILE: "validator2.json"
      DISABLE_NAT_TRAVERSAL: "true"
      ROCKSDB_PATH: "/app/db"
      # Security configuration - disabled for test network
      RATE_LIMIT_ENABLED: "false"
      DDOS_PROTECTION_ENABLED: "false"
      ADMIN_ADDRESS: "bqs1HpmbeSd8nhRpq5zX5df91D3Xy8pSUovmV"
      ATTACK_PATTERN_DETECTION: "false"
      BOT_DETECTION_ENABLED: "false"
      PEER_REPUTATION_ENABLED: "true"
      SECURITY_LOGGING_ENABLED: "true"
      # Redis configuration
      USE_REDIS: "true"
      REDIS_URL: "redis://redis:6379/2"
      # Rate limits (requests per minute)
      RATE_LIMIT_WORKER: "10"
      RATE_LIMIT_BALANCE: "100"
      RATE_LIMIT_TRANSACTIONS: "100"
      RATE_LIMIT_HEALTH: "100"
      RATE_LIMIT_UTXOS: "100"
      RATE_LIMIT_DEFAULT: "60"
      # RPC configuration
      RPC_PORT: ${RPC_PORT:-8334}
      # Monitoring configuration
      GRAFANA_ENABLED: ${GRAFANA:-true}
      GRAFANA_PORT: ${GRAFANA_PORT:-3000}
    command: ["--bootstrap_server", "bootstrap", "--bootstrap_port", "8001", "--dht-port", "8005", "--gossip-port", "8006"]
    ports:
      - "8082:8080"
      - "${RPC_PORT:-8334}:8332"     # RPC (configurable)
      - "8005:8005/udp"
      - "8006:8006"
    volumes:
      - validator2-data:/app/db
      - ./logs:/var/log/qbtc
    depends_on:
      - bootstrap
      - redis
    networks:
      - qbtc-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: qbtc-redis
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - qbtc-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: qbtc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-test.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=720h'  # 30 days retention
      - '--web.enable-lifecycle'
      - '--web.listen-address=:9090'
    networks:
      - qbtc-network
    restart: unless-stopped
    depends_on:
      - bootstrap
      - validator1
      - validator2

  # Grafana for visualization - TEST MODE (full access) - Conditional
  grafana:
    image: grafana/grafana:latest
    container_name: qbtc-grafana
    command: >
      sh -c '
      if [ "$${GRAFANA:-true}" = "false" ]; then
        echo "Grafana disabled via GRAFANA=false";
        exit 0;
      else
        exec /run.sh;
      fi'
    ports:
      - "${GRAFANA_PORT:-3000}:3000"     # Grafana (configurable port)
    environment:
      # Grafana control
      - GRAFANA=${GRAFANA:-true}

      # Admin settings
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}

      # Test mode - full access
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_DISABLE_LOGIN_FORM=false

      # Security settings
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=false  # false for test mode
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=false  # false for test mode

      # Dashboard settings
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/qbtc-overview.json

      # Enable editing for test mode
      - GF_USERS_DEFAULT_PERMISSIONS=Editor
      - GF_USERS_VIEWERS_CAN_EDIT=true
      - GF_EXPLORE_ENABLED=true

      # Performance and chunk loading fixes
      - GF_DATAPROXY_TIMEOUT=300
      - GF_DATAPROXY_KEEP_ALIVE_SECONDS=300
      - GF_RENDERING_CONCURRENT_RENDER_REQUEST_LIMIT=10
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/custom.ini:/etc/grafana/grafana.ini:ro
    networks:
      - qbtc-network
    restart: "no"
    depends_on:
      - prometheus

  # Nginx reverse proxy - TEST MODE (simplified configuration)
  nginx:
    image: nginx:alpine
    container_name: qbtc-nginx-test
    ports:
      - "8080:8080"    # API/WebSocket proxy
    volumes:
      - ./monitoring/nginx/nginx-test.conf:/etc/nginx/nginx.conf:ro
    networks:
      - qbtc-network
    restart: unless-stopped
    depends_on:
      - bootstrap
      - validator1
      - validator2
    security_opt:
      - no-new-privileges:true

volumes:
  bootstrap-data:
  validator1-data:
  validator2-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  qbtc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
