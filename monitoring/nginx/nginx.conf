events {
    worker_connections 1024;
}

http {
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=grafana_limit:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name _;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl;
        http2 on;
        server_name ${DOMAIN_NAME};

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Grafana (read-only public access)
        location /grafana/ {
            limit_req zone=grafana_limit burst=20 nodelay;
            
            # Remove any auth headers to ensure anonymous access
            proxy_set_header Authorization "";
            
            proxy_pass http://grafana:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Disable any admin/edit endpoints
            location ~ ^/grafana/(admin|api/admin|api/datasources|api/dashboards/db|api/dashboards/uid/.*/permissions|api/folders|api/annotations|api/alerts|api/users) {
                return 403;
            }
        }

        # Block direct access to Prometheus (internal use only)
        location /prometheus/ {
            return 403;
        }

        # Block debug endpoints
        location ~ ^/debug/ {
            return 403;
        }

        # qBTC API endpoints (optional - remove if not needed)
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://qbtc-bootstrap:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}